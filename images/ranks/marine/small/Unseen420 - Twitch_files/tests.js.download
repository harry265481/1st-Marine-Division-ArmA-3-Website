function r() {
	var items = model.collections.avatars();
	var parent = items[0];
	var item = items[1];

	var tests = [parentTest, followerTest, subscriberTest, moderatorTest, parentChildLockTest, giftOnlyTest, parentGiftOnlyTest, subOrFollowLockTest];
	for (var x in tests) {
		resetViewer();
		resetItem(parent);
		resetItem(item);
		try
		{
			tests[x](model.viewer, parent, item);
		}
		catch (ex)
		{
			console.log(model.viewer);
			console.log(parent, parent.locked(), parent.visible());
			console.log(item, item.locked(), item.visible());
			throw ex;
		}
	}
	console.log('tests passed');
}

function subOrFollowLockTest(viewer, parent, item) {
	item.followerOnly(true);
	item.subscriberOnly(true);
	if (item.showSubLock()) throw 'subfollow sub lock test failed';
	if (!item.showFollowLock()) throw 'subfollow follow lock test failed';

	item.followerOnly(false);
	item.subscriberOnly(true);
	if (!item.showSubLock()) throw 'subfollow sub lock test failed 2';
	if (item.showFollowLock()) throw 'subfollow follow lock test failed 2';
}

function parentTest(viewer, parent, item) {
	item.parents([parent]);
	parent.price(100);
	if (!item.locked()) throw 'parent lock check failed';
	parent.owned(true);
	if (item.locked()) throw 'parent unlock check failed';
}

function giftOnlyTest(viewer, parent, item) {
	item.giftedOnly(true);
	if (item.visible()) throw 'gift invisible check failed';
	item.owned(true);
	if (!item.visible()) throw 'gift visible check failed';
}

function parentGiftOnlyTest(viewer, parent, item) {
	parent.giftedOnly(true);
	item.parents([parent]);
	if (parent.visible() || item.visible()) throw 'parent gift invisible check failed';
	parent.owned(true);
	if (!parent.visible() || !item.visible()) throw 'parent gift visible check failed';
}

function pointsTest(viewer, parent, item) {
	item.price(100);
	if (!item.locked()) throw 'price lock check failed';
	item.owned(true);
	if (item.locked()) throw 'price unlock check failed';
}

function followerTest(viewer, parent, item) {
	item.followerOnly(true);
	if (!item.locked()) throw 'follow lock check failed';
	viewer.follower(true);
	if (item.locked()) throw 'follow unlock check failed';
}

function subscriberTest(viewer, parent, item) {
	item.subscriberOnly(true);
	if (!item.locked()) throw 'subscriber lock check failed';
	viewer.subscriber(true);
	if (item.locked()) throw 'subscriber unlock check failed';
}

function moderatorTest(viewer, parent, item) {
	item.moderatorOnly(true);
	if (item.visible()) throw 'moderator invisible check failed';
	viewer.moderator(true);
	item.price(100);
	if (!item.visible()) throw 'moderator visible check failed';
	if (item.locked()) throw 'moderator lock check failed';
}

function orderTest(viewer, parent, item) {
	parent.order('0');
	item.order('1');

	if (model.collections.avatars()[0] != parent) throw 'parent ordered first check failed';
	if (model.collections.avatars()[1] != item) throw 'item ordered second check failed';

	parent.order('1');
	item.order('0');

	if (model.collections.avatars()[1] != parent) throw 'parent ordered second check failed';
	if (model.collections.avatars()[0] != item) throw 'item ordered first check failed';
}

function parentChildLockTest(viewer, parent, item) {
	item.price(100);
	item.followerOnly(true);
	item.subscriberOnly(true);
	item.parents([parent]);
	parent.price(100);
	parent.followerOnly(true);
	parent.subscriberOnly(true);

	if (!item.locked() || !parent.locked()) throw 'full restriction lock check failed';
	if (!item.visible() || !parent.visible()) throw 'full restriction visible check failed';
	if (!item.parentLocked()) throw 'full restriction parent lock check failed';

	viewer.follower(true);
	if (parent.locked() || item.locked()) throw 'full restriction follow parent unlock check failed';

	viewer.follower(false);
	viewer.subscriber(true);
	if (parent.locked() || item.locked()) throw 'full restriction subscriber parent unlock check failed';

	viewer.subscriber(false);
	parent.owned(true);
	if (parent.locked() || !item.locked()) throw 'full restriction parent unlock check failed';
}

function resetViewer() {
	var viewer = model.viewer;
	viewer.subscriber(false);
	viewer.follower(false);
	viewer.moderator(false);
	viewer.ownsEverything(false);
}

function resetItem(item) {
	item.price(0);
	item.followerOnly(false);
	item.subscriberOnly(false);
	item.moderatorOnly(false);
	item.giftedOnly(false);
	item.parents([]);
	item.owned(false);
}

//setTimeout(r, 1000);